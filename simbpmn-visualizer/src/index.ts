import { app, BrowserWindow, ipcMain, dialog, shell, MessageBoxSyncOptions, WebPreferences } from 'electron';
import fs from 'fs';
import i18n from 'i18next';
import config from './configs/app.config';
import { buildMenu } from './menus/menu';
import settings from 'electron-settings';
import os from 'os';
import path from 'path';
import walkdir from 'walkdir';
import { Workspace } from './scripts/workspace/workspace';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: any;
let workspace: Workspace;

function handleReadDirectory(path: string, callback: any) {
    fs.readdir(path, callback);

    let files: string[];
    return files;
}

function createWindow() {
    mainWindow = new BrowserWindow({
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            contextIsolation: true
        } as WebPreferences
    });
    mainWindow.maximize();

    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY );

    buildMenu(app, mainWindow);

    //--------------------------------------------DEV------------------------
    // yarn start -- -- -- --dev
    if (process.argv[2] === '--dev') {
       mainWindow.webContents.openDevTools();
    }
}

async function initSettings() {
    const isWorkspaceDefined = await settings.has('workspace.path');
    if (!isWorkspaceDefined) {
        const workspacePath = path.join(os.homedir(), 'workspace_simbpmn');
        if (!fs.existsSync(workspacePath)) {
            fs.mkdirSync(workspacePath);
        }

        await settings.set('workspace', {
            path: workspacePath
        });
    }
    const workspacePath = await settings.get('workspace.path');
    workspace = new Workspace(mainWindow, workspacePath.toString());
}


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

app.on('before-quit', () => {
    settings.setSync('workspace', {
        lastFile: workspace.activeBpmnFile
    });
    settings.setSync('workspace', {
        path: workspace.workspacePath
    });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {

    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        //createWindow();
    }
});

app.whenReady().then(() => {
    initSettings().then(() => {
        ipcMain.handle('addAttachment', () => workspace.addNewAttachments())
        ipcMain.handle('openFile', (event, filePath, isFullPath) => workspace.handleOpenFile(filePath, isFullPath))
        ipcMain.handle('fs:readdir', (event, path, callback) => handleReadDirectory(path, callback))
        ipcMain.handle('settings:getWorkspacePath', () => workspace.getWorkspacePath());
        ipcMain.handle('createNewFile', (event, filename, xml) => workspace.createNewFile(filename, xml))
        ipcMain.handle('deleteFile', (event, path) => workspace.deleteFile(path))
        ipcMain.handle('exportBPMN', () => workspace.exportBPMN());
        ipcMain.handle('importBPMN', () => workspace.importBPMN());
        ipcMain.handle('changeWorkspaceLocation', () => workspace.changeWorkspaceLocation());
        ipcMain.handle('changeApplicationLanguage', (event, languageCode) => {
            settings.set('language', {
                code: languageCode
            });
            i18n.changeLanguage(languageCode)
        });
        ipcMain.handle('getApplicationLanguage', () => i18n.language);
        ipcMain.on('xml-value', (event, xml) => workspace.createBpmnFile(xml));
        ipcMain.on('askForSavingChanges', (event) => {
            event.returnValue = require('electron').dialog.showMessageBoxSync(mainWindow,
                {
                    type: 'question',
                    buttons: ['Yes', 'No', 'Cancel'],
                    title: 'Unsaved changes',
                    message: 'Do you want to save changes?'
                });
        });
        ipcMain.on('askForDeleting', (event) => {
            event.returnValue = require('electron').dialog.showMessageBoxSync(mainWindow,
                {
                    type: 'question',
                    buttons: ['Yes', 'No'],
                    title: 'Deleting',
                    message: 'Are you sure you want to delete the project?'
                });
        });        
        ipcMain.on('closeApp', (event) => {
            app.quit()
        });
        ipcMain.handle('saveForQuit', (event, xml) => {
            workspace.createBpmnFile(xml);
            //app.quit();
        });
        ipcMain.on('isDev', (event) => {
            event.returnValue = (process.argv[2] === '--dev');
        });
        ipcMain.on('projectExists', (event, name) => {
            event.returnValue = workspace.projectExists(name);
        });
        ipcMain.on('hasProjectAttachments', (event, name) => {
            event.returnValue = workspace.hasProjectAttachments(name);
        });
        ipcMain.on('canRenameProject', (event, name) => {
            event.returnValue = workspace.canRenameProject(name);
        });
        ipcMain.handle('renameProject', (event, oldName, newName) => {
            workspace.renameProject(oldName, newName);
        });
        ipcMain.on('showMessage', (event, title, message, type) => {
            event.returnValue = require('electron').dialog.showMessageBoxSync(mainWindow,
                {
                    type: type,
                    buttons: ['Ok'],
                    title: title,
                    message: message
                });
        });
    })

    createWindow();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
i18n.on('loaded', (loaded: any) => {
    if (settings.hasSync('language.code')) {
        i18n.changeLanguage(settings.getSync('language.code').toString());
    } else {
        i18n.changeLanguage(app.getLocale());
    }
    i18n.off('loaded');
});

i18n.on('languageChanged', (lng: any) => {
    buildMenu(app, mainWindow);
    mainWindow.webContents.send('language-changed', {
        language: lng,
        namespace: config.namespace,
        resource: i18n.getResourceBundle(lng, config.namespace)
    });
});


//----------------------------------------------------------------
//sidebar code
//----------------------------------------------------------------

ipcMain.handle("scanDirectory", (event: any, path: string) => {
    return walkdir.sync(path);
});

ipcMain.handle("isDirectory", (event: any, path: string) => {
    const stats = fs.statSync(path);
    const isDirectory = !stats.isFile();
    //console.log("is directory: " + isDirectory);
    return isDirectory;
});

process.on('unhandledRejection', (reason, p) => {
    console.error(`Unhandled Rejection at: ${p} reason: ${reason}`);
});


//----------------------------------------------------------------
//logic code
//----------------------------------------------------------------
ipcMain.handle("saveLogicRelay", (event: any, xml: string) => {
    //console.log("relaying save logic");
    mainWindow.webContents.send('saveLogic', xml);
});

ipcMain.handle("openLogicRelay", (event: any, xml: string) => {
    //console.log("relaying open logic");
    mainWindow.webContents.send('openLogic', xml);
});

ipcMain.handle("adjustResourcesInLogicRelay", (event: any, resources: []) => {
    return mainWindow.webContents.send('adjustResourcesInLogic', resources);
});

//----------------------------------------------------------------
//translations code
//----------------------------------------------------------------
ipcMain.handle("getTranslation", (event: any, key: string) => {
    return i18n.t(key);
});