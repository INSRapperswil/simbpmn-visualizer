import { ipcRenderer, contextBridge } from 'electron';
import { Callbacks } from 'jquery';

contextBridge.exposeInMainWorld('electronAPI', {
  addAttachment: () => ipcRenderer.invoke('addAttachment'),
  openFileDialog: () => ipcRenderer.invoke('dialog:openFileDialog'),
  openFile: (filePath: string, isFullPath: boolean) => ipcRenderer.invoke('openFile', filePath, isFullPath),
  scanDirectory: (filePath: string) => ipcRenderer.invoke("scanDirectory", filePath),
  isDirectory: (filePath: string) => ipcRenderer.invoke("isDirectory", filePath),
  getWorkspacePath: () => ipcRenderer.invoke("settings:getWorkspacePath"),
  createNewFile: (filename: string, xml: string) => ipcRenderer.invoke("createNewFile", filename, xml),
  deleteFile: (path: string) => ipcRenderer.invoke("deleteFile", path),
  saveLogicRelay: (xml: string) => ipcRenderer.invoke("saveLogicRelay", xml),
  openLogicRelay: (xml: string) => ipcRenderer.invoke("openLogicRelay", xml),
  adjustResourcesInLogicRelay: (resources: []) => ipcRenderer.invoke("adjustResourcesInLogicRelay", resources),
  exportBPMN: () => ipcRenderer.invoke("exportBPMN"),
  importBPMN: () => ipcRenderer.invoke("importBPMN"),
  changeWorkspaceLocation: () => ipcRenderer.invoke("changeWorkspaceLocation"),
  changeApplicationLanguage: (languageCode: string) => ipcRenderer.invoke("changeApplicationLanguage", languageCode),
  getApplicationLanguage: () => ipcRenderer.invoke("getApplicationLanguage"),
  getTranslation: (key: string) => ipcRenderer.invoke("getTranslation", key),

  loadFolder: (callback: any) => ipcRenderer.on("loadFolder", callback),
  callExportBPMN: (callback: any) => ipcRenderer.on("callExportBPMN", callback),
  callImportBPMN: (callback: any) => ipcRenderer.on("callImportBPMN", callback),
  onCreateXmlFile: (callback: any) => ipcRenderer.on("createXmlFile", callback),
  returnToMainPage: (callback: any) => ipcRenderer.on("returnToMainPage", callback),
  onOpenXmlFile: (callback: any) => ipcRenderer.on("openXmlFile", callback),
  saveLogic: (callback: any) => ipcRenderer.on("saveLogic", callback),
  openLogic: (callback: any) => ipcRenderer.on("openLogic", callback),
  adjustResourcesInLogic: (callback: any) => ipcRenderer.on("adjustResourcesInLogic", callback),
  askForSavingChanges: () => ipcRenderer.sendSync("askForSavingChanges"),
  askForDeleting: () => ipcRenderer.sendSync("askForDeleting"),
  saveForQuit: (xml: string) => ipcRenderer.invoke("saveForQuit", xml),
  closeApp: () => ipcRenderer.sendSync("closeApp"),
  isDev: () => ipcRenderer.sendSync("isDev"),
  projectExists: (name: string) => ipcRenderer.sendSync("projectExists", name),
  renameProject: (oldName: string, newName: string) => ipcRenderer.invoke("renameProject", oldName, newName),
  showMessage: (title: string, message: string, type: string) => ipcRenderer.sendSync("showMessage", title, message, type)
});